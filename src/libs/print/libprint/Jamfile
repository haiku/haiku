SubDir HAIKU_TOP src libs print libprint ;

SubDirHdrs [ FDirName $(HAIKU_TOP) headers libs print libprint ] ;

# Explicitly set C++ standard per architecture for objects in this Jamfile
# This is to ensure C++14 for problematic architectures if global rules are overridden.
local libPrintTargetObjects =
	AboutBox.cpp
	AddPrinterDlg.cpp
	BlockingWindow.cpp
	DbgMsg.cpp
	DialogWindow.cpp
	GraphicsDriver.cpp
	Halftone.cpp
	HalftoneView.cpp
	JSDSlider.cpp
	JobData.cpp
	JobSetupDlg.cpp
	MarginView.cpp
	PackBits.cpp
	PageSetupDlg.cpp
	PagesView.cpp
	Preview.cpp
	PrinterData.cpp
	PrinterDriver.cpp
	PrinterCap.cpp
	PrintProcess.cpp
	PrintJobReader.cpp
	PrintUtils.cpp
	SpoolMetaData.cpp
	StatusWindow.cpp
	Transport.cpp
	UIDriver.cpp
	ValidRect.cpp
;

local archIterPrint ;
for archIterPrint in $(TARGET_PACKAGING_ARCHS) {
	if $(archIterPrint) in sparc m68k ppc {
		C++FLAGS on [ FGristFiles $(libPrintTargetObjects) : G=<$(archIterPrint)>* ] = -std=gnu++14 ;
			# This attempts to prepend. If existing flags have another -std=, it might conflict.
			# A cleaner way is to ensure ArchitectureRules is the sole provider of -std flags.
			# For now, this is a targeted override.
	} else {
		# Ensure C++17 for others if not already set by a more specific rule or default.
		# C++FLAGS on [ FGristFiles $(libPrintTargetObjects) : G=<$(archIterPrint)>* ] += -std=gnu++17 ; # This might be too broad
	}
}
# The above loop might not work as intended due to when TARGET_PACKAGING_ARCHS is populated
# vs when flags are applied.
# A more direct, though less elegant, way if the above fails:
# C++FLAGS on AboutBox.cpp:<sparc> += -std=gnu++14 ; (repeated for all files & archs)

# Corrected approach: Rely on the per-architecture context of the StaticLibrary rule.
# The StaticLibrary rule itself will be processed for each target architecture.
# We will set C++FLAGS on the *.cpp sources *within the context of that rule processing*.
# However, we can't directly modify the StaticLibrary rule here.
# The most effective local override is to use SubDirC++Flags if this Jamfile
# is processed within a MultiArchSubDirSetup context, or ensure global flags from
# ArchitectureRules are not overridden.

# Since ArchitectureRules modification was not reliably working for all kits,
# let's try the explicit SubDirC++Flags approach for this kit,
# similar to libnetservices2. This requires this Jamfile to be "SubInclude"d
# within a MultiArchSubDirSetup loop. The parent src/libs/Jamfile doesn't do that.
# So, we must rely on the HAIKU_C++FLAGS_$(TARGET_PACKAGING_ARCH) being correctly
# set by ArchitectureRules and *not overridden*.

# If the logs *still* show -std=gnu++17 for PPC libprint after the refined
# ArchitectureRules, it means there's a very stubborn override.
# Forcing it directly on the objects for problem archs:
# This is an attempt to modify the C++FLAGS for objects of libprint.a
# when the active build architecture is one of the problematic ones.
# This depends on how Jam's rules inherit and apply flags.

# Clean any existing -std flags and set the desired one FOR ALL OBJECTS IN THIS JAMFILE.
# This is a stronger override attempt.
local cleanLibPrintCxxFlags;
local existingLibPrintCxxFlags = $(C++FLAGS); # Inherited C++FLAGS
local flagPrint;
for flagPrint in $(existingLibPrintCxxFlags) {
	if ! [ Match "-std=*" : $(flagPrint) ] {
		cleanLibPrintCxxFlags += $(flagPrint);
	}
}
# This logic needs to be inside an "on target" or similar conditional block
# to be architecture-specific. Applying it globally here will affect all archs.

# Let's apply it conditionally using TARGET_PACKAGING_ARCH.
# This assumes this Jamfile is evaluated in a context where TARGET_PACKAGING_ARCH is relevant.
if $(TARGET_PACKAGING_ARCH) in sparc m68k ppc {
	SubDirC++Flags $(cleanLibPrintCxxFlags) -std=gnu++14 ;
} else {
	SubDirC++Flags $(cleanLibPrintCxxFlags) -std=gnu++17 ;
}
# This is the most direct SubDir level override we can try here.

StaticLibrary libprint.a :
	AboutBox.cpp
	AddPrinterDlg.cpp
	BlockingWindow.cpp
	DbgMsg.cpp
	DialogWindow.cpp
	GraphicsDriver.cpp
	Halftone.cpp
	HalftoneView.cpp
	JSDSlider.cpp
	JobData.cpp
	JobSetupDlg.cpp
	MarginView.cpp
	PackBits.cpp
	PageSetupDlg.cpp
	PagesView.cpp
	Preview.cpp
	PrinterData.cpp
	PrinterDriver.cpp
	PrinterCap.cpp
	PrintProcess.cpp
	PrintJobReader.cpp
	PrintUtils.cpp
	SpoolMetaData.cpp
	StatusWindow.cpp
	Transport.cpp
	UIDriver.cpp
	ValidRect.cpp
;

